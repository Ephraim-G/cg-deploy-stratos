---
jobs:
- name: new-major-upstream
  serial: true
  plan:
    - get: next-stratos-release
      trigger: true
      params:
        globs: [do-not-download-assets]
    - put: slack
      params:
        text: |
          :exclamation: A new _major_ version of stratos is available!  Update the pipeline.yml to start deploying it.
        channel: ((production-slack-channel))
        username: ((slack-username))
        icon_url: ((slack-icon-url))

- name: compile-assets
  serial: true
  plan:
  - in_parallel:
    - get: stratos-release
      trigger: true
      params:
        include_source_tarball: true
    - get: config
      trigger: true
  - task: precompile
    file: config/ci/precompile.yml
  - put: precompiled
    params:
      file: precompiled/stratos.tgz

- name: deploy-dev
  serial: true
  plan:
  - get: precompiled
    passed: [compile-assets]
    trigger: true
    params:
      unpack: true
  - put: create-db
    resource: cf-cli-dev
    params: &db-params
      command: create-service
      update_service: true
      # Note, the RDS broker doesn't return the correct status while provisioning:
      # https://github.com/18F/aws-broker/issues/59
      # If a new deployment, manually re-trigger the build once the RDS is up.
      wait_for_service: true
      timeout: 1200  # RDS take a long time to provision
      service_instance: stratos-db
      service: aws-rds
      plan: medium-psql
  - put: cf-dev
    params:
      path: precompiled/
      current_app_name: stratos
      manifest: precompiled/manifest.yml
      show_app_log: true
      vars:
        route: ((dev-cf-route))
      environment_variables:
        SSO_LOGIN: "true"
        SSO_OPTIONS: "nosplash,logout"
        SSO_WHITELIST: "https://((dev-cf-route))/*"
        CF_CLIENT: stratos
        CF_CLIENT_SECRET: ((dev-cf-client-secret))
        SESSION_STORE_SECRET: ((dev-session-store-secret))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Stratos on dev
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((dev-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Stratos on dev
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((dev-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-staging
  serial: true
  plan:
  - in_parallel:
    - get: precompiled
      passed: [deploy-dev]
      trigger: true
      params:
        unpack: true
    - get: config
      trigger: false
  - put: create-db
    resource: cf-cli-staging
    params:
      <<: *db-params
  - put: cf-staging
    params:
      path: precompiled/
      current_app_name: stratos
      manifest: precompiled/manifest.yml
      show_app_log: true
      vars:
        route: ((staging-cf-route))
      environment_variables:
        SSO_LOGIN: "true"
        SSO_OPTIONS: "nosplash,logout"
        SSO_WHITELIST: "https://((staging-cf-route))/*"
        CF_CLIENT: stratos
        CF_CLIENT_SECRET: ((staging-cf-client-secret))
        SESSION_STORE_SECRET: ((staging-session-store-secret))
  - put: cf-staging
    # This can eventually be removed, once we're sure nobody is linking to
    # dashboard-beta.
    params:
      path: config/redirects
      manifest: config/redirects/manifest.yml
      current_app_name: dashboard-beta-redirects
      vars:
        external-route: dashboard-beta.fr-stage.cloud.gov
        app-route: dashboard-beta.apps.fr-stage.cloud.gov
        deprecated-route: dashboard-deprecated.fr-stage.cloud.gov
        redirect-url: dashboard.fr-stage.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Stratos on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((staging-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Stratos on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((staging-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: deploy-production
  serial: true
  plan:
  - in_parallel:
    - get: precompiled
      passed: [deploy-staging]
      trigger: true
      params:
        unpack: true
    - get: config
      trigger: false
  - put: create-db
    resource: cf-cli-production
    params:
      <<: *db-params
  - put: cf-production
    params:
      path: precompiled/
      current_app_name: stratos
      manifest: precompiled/manifest.yml
      show_app_log: true
      vars:
        route: ((production-cf-route))
      environment_variables:
        SSO_LOGIN: "true"
        SSO_OPTIONS: "nosplash,logout"
        SSO_WHITELIST: "https://((production-cf-route))/*"
        CF_CLIENT: stratos
        CF_CLIENT_SECRET: ((production-cf-client-secret))
        SESSION_STORE_SECRET: ((production-session-store-secret))
  - put: cf-production
    # This can eventually be removed, once we're sure nobody is linking to
    # dashboard-beta.
    params:
      path: config/redirects
      manifest: config/redirects/manifest.yml
      current_app_name: dashboard-beta-redirects
      vars:
        external-route: dashboard-beta.fr.cloud.gov
        app-route: dashboard-beta.app.cloud.gov
        deprecated-route: dashboard-deprecated.fr.cloud.gov
        redirect-url: dashboard.fr.cloud.gov
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Stratos on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((production-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Stratos on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((production-slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: cf-cli-resource
  type: docker-image
  source:
    repository: nulldriver/cf-cli-resource
    tag: latest

resources:
- name: stratos-release
  type: github-release
  icon: github-circle
  source:
    owner: cloud-gov
    repository: stratos
    access_token: ((github-access-token))
    # If you change this, change the one below as well.
    tag_filter: '^(4\..*)'

- name: next-stratos-release
  type: github-release
  icon: github-circle
  source:
    owner: cloud-gov
    repository: stratos
    access_token: ((github-access-token))
    # If you change this, change the one above as well.
    tag_filter: '^(5\..*)'

- name: config
  type: git
  icon: github-circle
  source:
    uri: ((github-uri))
    branch: ((github-branch))

- name: cf-dev
  type: cf
  icon: cloud-upload
  source:
    api: ((dev-cf-api-url))
    username: ((dev-cf-username))
    password: ((dev-cf-password))
    organization: ((dev-cf-organization))
    space: ((dev-cf-space))

- name: cf-staging
  type: cf
  icon: cloud-upload
  source:
    api: ((staging-cf-api-url))
    username: ((staging-cf-username))
    password: ((staging-cf-password))
    organization: ((staging-cf-organization))
    space: ((staging-cf-space))

- name: cf-production
  type: cf
  icon: cloud-upload
  source:
    api: ((production-cf-api-url))
    username: ((production-cf-username))
    password: ((production-cf-password))
    organization: ((production-cf-organization))
    space: ((production-cf-space))

- name: cf-cli-dev
  type: cf-cli-resource
  source:
    api: ((dev-cf-api-url))
    username: ((dev-cf-username))
    password: ((dev-cf-password))
    org: ((dev-cf-organization))
    space: ((dev-cf-space))

- name: cf-cli-staging
  type: cf-cli-resource
  source:
    api: ((staging-cf-api-url))
    username: ((staging-cf-username))
    password: ((staging-cf-password))
    org: ((staging-cf-organization))
    space: ((staging-cf-space))

- name: cf-cli-production
  type: cf-cli-resource
  source:
    api: ((production-cf-api-url))
    username: ((production-cf-username))
    password: ((production-cf-password))
    org: ((production-cf-organization))
    space: ((production-cf-space))

- name: precompiled
  type: s3-iam
  icon: database
  source:
    bucket: cg-build-artifacts
    versioned_file: deploy-stratos/stratos.tgz
    region_name: us-gov-west-1
    server_side_encryption: AES256

- name: slack
  type: slack-notification
  icon: slack
  source:
    url: ((slack-webhook-url))
